## ---------------------------- Common database checks sql
# ping connection
# result: ignored, we just make sure there's no exception
check.connection = SELECT 1 FROM PAGE WHERE 2=1

# any number of initialization checks
# result: ignored, we just make sure there's no exception
check.wiki_page = SELECT COUNT(*) FROM PAGE
check.wiki_attachments = SELECT COUNT(*) FROM ATTACH

## ---------------------------- Wiki page sql
# check to see if a given page exists
# result: must be non-empty
page.exists = SELECT TOP 1 VERSION FROM PAGE WHERE NAME = ?

# check to see if a given page exists at a given version
# (to support the VersioningProvider interface)
# result: must be non-empty
page.versionExists = SELECT VERSION FROM PAGE WHERE NAME = ? AND VERSION = ? 

# get the text content for the latest version of the given page
# result: string(text)
page.getCurrent = SELECT P1.CONTENT FROM PAGE P1 WHERE P1.NAME = ? AND P1.VERSION = (SELECT MAX(VERSION) FROM PAGE P2 WHERE P2.NAME=P1.NAME) ###


# get the text content for the given version of the given page
# result: string(text)
page.getVersion = SELECT CONTENT FROM PAGE WHERE NAME = ? AND VERSION = ?

# insert a new record into the current pages table
# input: string, int, timestamp, string, string
page.insertPage = INSERT INTO PAGE (NAME, VERSION, CHANGE_TIME, CHANGE_BY, CHANGE_NOTE, CONTENT) VALUES (?, ?, ?, ?, ?, ?)

# update a versioned page, for a continuation edit
page.updatePage = UPDATE PAGE SET CHANGE_TIME=?, CHANGE_BY=?, CHANGE_NOTE=?, CONTENT=? WHERE NAME =? AND VERSION=?

# get info for current page
# input: string
# result: int(version), timestamp(CHANGE-when), string(CHANGE-by)
page.getCurrentInfo = SELECT P1.VERSION, P1.CHANGE_TIME, P1.CHANGE_BY, P1.CHANGE_NOTE FROM PAGE P1 WHERE P1.NAME=? AND P1.VERSION = (SELECT MAX(VERSION) FROM PAGE P2 WHERE P2.NAME=P1.NAME)

# get info for version page
# input: string, int
# result: int(version), timestamp(CHANGE-when), string(CHANGE-by)
page.getVersionInfo = SELECT VERSION, CHANGE_TIME, CHANGE_BY, CHANGE_NOTE FROM PAGE WHERE NAME = ? AND VERSION = ?

# get latest version of every page
# result: string(name), int(version), timestamp(CHANGE-when), string(CHANGE-by)
page.getAllPages = SELECT  P1.NAME, P1.VERSION, P1.CHANGE_TIME, P1.CHANGE_BY, P1.CHANGE_NOTE FROM PAGE P1 WHERE P1.VERSION = (SELECT MAX(VERSION) FROM PAGE P2 WHERE P2.NAME=P1.NAME)

# get latest version of every page CHANGE since the given date
# input: timestamp
# result: string(name), int(version), timestamp(CHANGE-when), string(CHANGE-by)
page.getAllChangedSince = SELECT  P1.NAME, P1.VERSION, P1.CHANGE_TIME, P1.CHANGE_BY, P1.CHANGE_NOTE FROM PAGE P1 WHERE P1.CHANGE_TIME > ? AND P1.VERSION = (SELECT MAX(VERSION) FROM PAGE P2 WHERE P2.NAME=P1.NAME)

# get number of pages (with unique names)
# result: int(count)
page.getPageCount = SELECT COUNT(DISTINCT NAME) from PAGE

# get info for all versions of a given page, sorted by descending version num
# input: string
# result: int(version), timestamp(CHANGE-when), string(CHANGE-by)
page.getVersions =  SELECT VERSION, CHANGE_TIME, CHANGE_BY, CHANGE_NOTE FROM PAGE WHERE NAME = ? ORDER BY VERSION

# delete given version of given page
# input: string, int
page.deleteVersion = DELETE FROM PAGE WHERE NAME = ? AND VERSION = ?

# delete all versions of given page
# input: string
page.deleteVersions = DELETE FROM PAGE WHERE VERSION = ?

# rename current version given page
# input: string, string
page.move = UPDATE PAGE SET NAME = ? WHERE NAME = ?

## ---------------------------- Wiki attachment sql

# get number of attachment pages
attachment.getCount = SELECT COUNT(*) FROM ATTACH

# insert a new attachment (possible a new version of an existing attachment
attachment.insert = INSERT INTO ATTACH (PAGENAME, FILENAME, VERSION, CHANGE_TIME, CHANGE_BY, CHANGE_NOTE, DATA, LENGTH) VALUES (?, ?, ?, ?, ?, ?, ?, ?)

# get attachment data
attachment.getData = SELECT DATA FROM ATTACH WHERE PAGENAME = ? AND FILENAME = ? AND VERSION = ?

# get list of attachments for a given page grouped by filename in descending order of version number
attachment.getList = SELECT LENGTH, FILENAME, CHANGE_TIME, CHANGE_BY, CHANGE_NOTE, VERSION FROM ATTACH WHERE PAGENAME = ? ORDER BY FILENAME, VERSION DESC

# get list of attachment changed since the given date
attachment.getChanged = SELECT PAGENAME, FILENAME, LENGTH, CHANGE_TIME, CHANGE_BY, CHANGE_NOTE, VERSION FROM ATTACH WHERE CHANGE_TIME > ? ORDER BY CHANGE_TIME DESC

# get info for a given page/attachment/version
attachment.getInfo = SELECT LENGTH, CHANGE_TIME, CHANGE_BY, CHANGE_NOTE FROM ATTACH WHERE PAGENAME = ? AND FILENAME = ? AND VERSION = ?

# get latest version for the given page/attachment
attachment.getLatestVersion = SELECT max(VERSION) FROM ATTACH WHERE PAGENAME = ? AND FILENAME = ?

# get info for each version in descending order of version number
attachment.getVersions = SELECT LENGTH, CHANGE_TIME, CHANGE_BY, CHANGE_NOTE, VERSION FROM ATTACH WHERE PAGENAME = ? AND FILENAME = ? ORDER BY VERSION DESC

# delete a given page/attachment/version
attachment.deleteVersion = DELETE FROM ATTACH WHERE PAGENAME = ? AND FILENAME = ? AND VERSION = ?

# delete a given page/attachment (all versions)
attachment.delete = DELETE FROM ATTACH WHERE PAGENAME = ? AND FILENAME = ?

# move an attachment from one page to another page
attachment.move = UPDATE ATTACH SET PAGENAME = ? WHERE PAGENAME = ?


