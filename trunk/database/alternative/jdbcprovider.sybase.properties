## This is NOT implemented yet - it's just here for inspration and discussion
## among the developer team.


## ---------------------------- Common database checks sql
# ping connection
# result: ignored, we just make sure there's no exception
checkConnection = SELECT 1 FROM WIKI_PAGE WHERE 2=1

# any number of initialization checks
# result: ignored, we just make sure there's no exception
check.1 = SELECT COUNT(*) FROM WIKI_PAGE
check.2 = SELECT COUNT(*) FROM WIKI_PAGE_VERSIONS
check.3 = SELECT COUNT(*) FROM WIKI_WIKI_ATT

## ---------------------------- Wiki page sql
# check to see if a given page exists
# result: must be non-empty
page.pageExists = SELECT PAGE_VERSION FROM WIKI_PAGE WHERE PAGE_NAME = ?

# get the text content for the latest version of the given page
# result: string(text)
page.getCurrent = SELECT PAGE_TEXT FROM WIKI_PAGE WHERE PAGE_NAME = ?

# get the text content for the given version of the given page
# result: string(text)
page.getVersion = SELECT VERSION_TEXT FROM WIKI_PAGE_VERSIONS WHERE VERSION_NAME = ? AND VERSION_NUM = ?

# insert a new record into the current pages table
# input: string, int, timestamp, string, string
page.insertCurrent = INSERT INTO WIKI_PAGE (PAGE_NAME, PAGE_VERSION, PAGE_MODIFIED, PAGE_MODIFIED_BY, PAGE_TEXT) VALUES (?, ?, ?, ?, ?)

# insert a new record into the version pages table
# input: string, int, timestamp, string, string
page.insertVersion = INSERT INTO WIKI_PAGE_VERSIONS (VERSION_NAME, VERSION_NUM, VERSION_MODIFIED, VERSION_MODIFIED_BY, VERSION_TEXT) VALUES (?, ?, ?, ?, ?)

# get info for current page
# input: string
# result: int(version), timestamp(modified-when), string(modified-by)
page.getCurrentInfo = SELECT PAGE_VERSION, PAGE_MODIFIED, PAGE_MODIFIED_BY FROM WIKI_PAGE WHERE PAGE_NAME = ?

# get info for version page
# input: string, int
# result: int(version), timestamp(modified-when), string(modified-by)
page.getVersionInfo = SELECT VERSION_NUM, VERSION_MODIFIED, VERSION_MODIFIED_BY FROM WIKI_PAGE_VERSIONS WHERE VERSION_NAME = ? AND VERSION_NUM = ?

# update record in the current pages table
# input: timestamp, string, int, string, string
page.updateCurrent = UPDATE WIKI_PAGE SET PAGE_MODIFIED = ?, PAGE_MODIFIED_BY = ?, PAGE_VERSION = ?, PAGE_TEXT = ? WHERE PAGE_NAME = ?

# get latest version of every page
# result: string(name), int(version), timestamp(modified-when), string(modified-by)
page.getAllPages = SELECT PAGE_NAME, PAGE_VERSION, PAGE_MODIFIED, PAGE_MODIFIED_BY FROM WIKI_PAGE

# get latest version of every page modified since the given date
# input: timestamp
# result: string(name), int(version), timestamp(modified-when), string(modified-by)
page.getAllPagesSince = SELECT PAGE_NAME, PAGE_VERSION, PAGE_MODIFIED, PAGE_MODIFIED_BY FROM WIKI_PAGE WHERE PAGE_MODIFIED > ?

# get number of pages (with unique names)
# result: int(count)
page.getPageCount = SELECT COUNT(*) FROM WIKI_PAGE

# get info for all versions of a given page, sorted by descending version num
# input: string
# result: int(version), timestamp(modified-when), string(modified-by)
page.getVersions = SELECT VERSION_NUM, VERSION_MODIFIED, VERSION_MODIFIED_BY FROM WIKI_PAGE_VERSIONS WHERE VERSION_NAME = ? ORDER BY VERSION_NUM DESC

# delete current version given page
# input: string
page.deleteCurrent = DELETE FROM WIKI_PAGE WHERE PAGE_NAME = ?

# delete given version of given page
# input: string, int
page.deleteVersion = DELETE FROM WIKI_PAGE_VERSIONS WHERE VERSION_NAME = ? AND VERSION_NUM = ?

# delete all versions of given page
# input: string
page.deleteVersions = DELETE FROM WIKI_PAGE_VERSIONS WHERE VERSION_NAME = ?

# rename current version given page
# input: string, string
page.renameCurrent = UPDATE WIKI_PAGE SET PAGE_NAME = ? WHERE PAGE_NAME = ?

# rename all versions of given page
# input: string, string
page.renameVersions = UPDATE WIKI_PAGE_VERSIONS SET VERSION_NAME = ? WHERE VERSION_NAME = ?

## ---------------------------- Wiki attachment sql

# get number of attachment pages
attachment.getCount = SELECT COUNT(*) FROM WIKI_ATT

# insert a new attachment (possible a new version of an existing attachment
attachment.insert = INSERT INTO WIKI_ATT (ATT_PAGENAME, ATT_FILENAME, ATT_VERSION, ATT_MODIFIED, ATT_MODIFIED_BY, ATT_DATA, ATT_LENGTH) VALUES (?, ?, ?, ?, ?, ?, ?)

# get attachment data
attachment.getData = SELECT ATT_DATA FROM WIKI_ATT WHERE ATT_PAGENAME = ? AND ATT_FILENAME = ? AND ATT_VERSION = ?

# get list of attachments for a given page grouped by filename in descending order of version number
attachment.getList = SELECT ATT_LENGTH, ATT_FILENAME, ATT_MODIFIED, ATT_MODIFIED_BY, ATT_VERSION FROM WIKI_ATT WHERE ATT_PAGENAME = ? GROUP BY ATT_FILENAME ORDER BY ATT_VERSION DESC

# get list of attachment changed since the given date
attachment.getChanged = SELECT ATT_PAGENAME, ATT_FILENAME, ATT_LENGTH, ATT_MODIFIED, ATT_MODIFIED_BY, ATT_VERSION FROM WIKI_ATT WHERE ATT_MODIFIED > ? ORDER BY ATT_MODIFIED DESC

# get info for a given page/attachment/version
attachment.getInfo = SELECT ATT_LENGTH, ATT_MODIFIED, ATT_MODIFIED_BY FROM WIKI_ATT WHERE ATT_PAGENAME = ? AND ATT_FILENAME = ? AND ATT_VERSION = ?

# get latest version for the given page/attachment
attachment.getLatestVersion = SELECT max(ATT_VERSION) FROM WIKI_ATT WHERE ATT_PAGENAME = ? AND ATT_FILENAME = ?

# get info for each version in descending order of version number
attachment.getVersions = SELECT ATT_LENGTH, ATT_MODIFIED, ATT_MODIFIED_BY, ATT_VERSION FROM WIKI_ATT WHERE ATT_PAGENAME = ? AND ATT_FILENAME = ? ORDER BY ATT_VERSION DESC

# delete a given page/attachment/version
attachment.deleteVersion = DELETE FROM WIKI_ATT WHERE ATT_PAGENAME = ? AND ATT_FILENAME = ? AND ATT_VERSION = ?

# delete a given page/attachment (all versions)
attachment.delete = DELETE FROM WIKI_ATT WHERE ATT_PAGENAME = ? AND ATT_FILENAME = ?

# move an attachment from one page to another page
attachment.move = UPDATE WIKI_ATT SET ATT_PAGE_NAME = ? WHERE ATT_PAGE_NAME = ?
